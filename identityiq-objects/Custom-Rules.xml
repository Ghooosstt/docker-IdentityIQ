<?xml version='1.0' encoding='UTF-8'?>
<!DOCTYPE sailpoint PUBLIC "sailpoint.dtd" "sailpoint.dtd">
<sailpoint>

    <!-- Rule IdentityAttribute inactive -->
    <Rule language="beanshell" name="Custom-Rule-inactive" type="IdentityAttribute">
    <Description>Identity attribute rules are used when the value is not simply a copy of an application account attribute value.  A transformation may be necessary on the account attribute, or several account attributes may need to be combined to produce the identity attribute.

    This rule can be called in two ways: as a global mapping rule and an application mapping rule.  A global mapping rule is called whenever the identity is refreshed.  The rule can look at any account attributes.  An application mapping rule is called only when the identity contains an account link for that application, this link is passed in the "link" argument which is not passed in global mapping rules.</Description>
    <Signature returnType="String">
        <Inputs>
        <Argument name="log" type="org.apache.commons.logging.Log">
            <Description>
            The log object associated with the SailPointContext.
            </Description>
        </Argument>
        <Argument name="context" type="sailpoint.api.SailPointContext">
            <Description>
            A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
            </Description>
        </Argument>
        <Argument name="environment" type="Map">
            <Description>
            Arguments passed to the aggregation or refresh task.
            </Description>
        </Argument>
        <Argument name="identity">
            <Description>
            The Identity object that represents the user
            that is being aggregated.
            </Description>
        </Argument>
        <Argument name="attributeDefinition">
            <Description>
            The AttributeDefinition object for this attribute.
            </Description>
        </Argument>
        <Argument name="link">
            <Description>
            The Link object from the Identity, if this is an application
            mapping rule.  For global mapping rules this will be void.
            </Description>
        </Argument>
        <Argument name="attributeSource">
            <Description>
            The AttributeSource object.
            </Description>
        </Argument>
        <Argument name="oldValue">
            <Description>
            The original value of the application account attribute.
            </Description>
        </Argument>
        </Inputs>
        <Returns>
        <Argument name="attributeValue">
            <Description>
            The value of the attribute that should be populated.
            The rule should return this value.
            </Description>
        </Argument>
        </Returns>
    </Signature>
    <Source><![CDATA[
    import java.time.LocalDate;
    import java.time.format.DateTimeFormatter;

    boolean isInactive = false;
    if (link != null)
    {
        String endDate = link.getAttribute("endDate");
        if (endDate != null)
        {
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            LocalDate parsedEndDate = LocalDate.parse(endDate, formatter);
            LocalDate today = LocalDate.now();
            isInactive = parsedEndDate.isBefore(today) || parsedEndDate.isEqual(today);
        }
    }

    return isInactive;
    ]]></Source>
    </Rule>


    <!-- Rule IdentityCreation -->
    <Rule language="beanshell" name="Custom-Rule-IdentityCreation" type="IdentityCreation">
    <Description>Identity creation rules are used to set attributes on new Identity objects when they are created.  New identities may be created during the aggregation of application accounts, or optionally created after pass-through authentication.

    One common operation is to change the name property of the identity when the default application name is complex (such as a directory DN).

    Another common operation is to assign a set of initial capabilities based on the attributes pulled from the application account.</Description>
    <Signature returnType="void">
        <Inputs>
        <Argument name="log" type="org.apache.commons.logging.Log">
            <Description>
            The log object associated with the SailPointContext.
            </Description>
        </Argument>
        <Argument name="context" type="sailpoint.api.SailPointContext">
            <Description>
            A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
            </Description>
        </Argument>
        <Argument name="environment" type="Map">
            <Description>
            Arguments passed to the aggregation task.
            </Description>
        </Argument>
        <Argument name="application">
            <Description>
            Application being aggregated.
            </Description>
        </Argument>
        <Argument name="account" type="ResourceObject">
            <Description>
            The resource account for the identity being created.
            </Description>
        </Argument>
        <Argument name="identity" type="Identity">
            <Description>
            The identity that is being created.
            </Description>
        </Argument>
        </Inputs>
    </Signature>
    <Source><![CDATA[
        identity.setPassword("xyzzy");
        ]]></Source>
    </Rule>


    <!-- Rule GroupAggregationRefresh OpenLDAP -->
    <Rule language="beanshell" name="Custom-Rule-GroupAggregationRefresh-OpenLDAP" type="GroupAggregationRefresh">
    <Description>This rule is used to set the owner or modify the account group before it is persisted to the database.</Description>
    <Signature returnType="Object">
        <Inputs>
        <Argument name="log" type="org.apache.commons.logging.Log">
            <Description>
            The log object associated with the SailPointContext.
            </Description>
        </Argument>
        <Argument name="context" type="sailpoint.api.SailPointContext">
            <Description>
            A sailpoint.api.SailPointContext object that can be used to query the database if necessary.
            </Description>
        </Argument>
        <Argument name="environment" type="Map">
            <Description>
            Arguments passed to the aggregation task.
            </Description>
        </Argument>
        <Argument name="obj" type="ResourceObject">
            <Description>
            A sailpoint.object.ResourceObject generated from the application
            and the ProvisioningPlan's ObjectRequest.
            </Description>
        </Argument>
        <Argument name="accountGroup" type="ManagedAttribute">
            <Description>
            The account group being refreshed.
            </Description>
        </Argument>
        <Argument name="groupApplication" type="Application">
            <Description>
            Application being aggregated.
            </Description>
        </Argument>
        </Inputs>
        <Returns>
        <Argument name="accountGroup" type="ManagedAttribute">
            <Description>
            The refreshed account group object.
            </Description>
        </Argument>
        </Returns>
    </Signature>
    <Source><![CDATA[
        accountGroup.setRequestable(false);
        ]]></Source>
    </Rule>


    <!-- Rule Create Role model -->
    <Rule language="beanshell" name="Custom-Rule-CreateRoleModel">
    <Description>
        This rule create the role model.
        </Description>
    <Source><![CDATA[
    import sailpoint.object.Bundle;
    import sailpoint.object.QueryOptions;
    import sailpoint.object.Filter;
    import sailpoint.object.ManagedAttribute;
    import sailpoint.object.Profile;
    import sailpoint.object.Application;
    import sailpoint.object.Identity;

    Application openLDAP = context.getObjectByName(Application.class, "OpenLDAP");
    Identity spadmin = context.getObjectByName(Identity.class, "spadmin");

    // Create organizationals bundles
    Bundle itRolesOrga = context.getObjectByName(Bundle.class, "itRoles");
    if (itRolesOrga == null)
    {
        itRolesOrga = new Bundle();
        itRolesOrga.setName("itRoles");
        itRolesOrga.setDisplayName("IT Roles");
        itRolesOrga.setType("organizational");
        itRolesOrga.setOwner(spadmin);
        context.saveObject(itRolesOrga);
    }

    Bundle businessRolesOrga = context.getObjectByName(Bundle.class, "businessRoles");
    if (businessRolesOrga == null)
    {
        businessRolesOrga = new Bundle();
        businessRolesOrga.setName("businessRoles");
        businessRolesOrga.setDisplayName("Business Roles");
        businessRolesOrga.setType("organizational");
        businessRolesOrga.setOwner(spadmin);
        context.saveObject(businessRolesOrga);
    }

    // Create IT role and Business role for each OpenLDAP group
    QueryOptions qo = new QueryOptions();
    qo.addFilter(Filter.eq("application.name", "OpenLDAP"));
    qo.addFilter(Filter.eq("type", "group"));
    Iterator it = context.search(ManagedAttribute.class, qo);
    while (it.hasNext())
    {
        ManagedAttribute ma = it.next();
        String cnRole = ma.getAttribute("cn");
        String dnValue = ma.getValue();
        String roleName = cnRole;
        String itRoleName = cnRole + "-IT";

        // Build IT Role
        Bundle itRole = context.getObjectByName(Bundle.class, itRoleName);
        if (itRole == null)
        {
            itRole = new Bundle();
            itRole.setName(itRoleName);
            itRole.setDisplayName(itRoleName);
            itRole.setType("it");
            itRole.setOwner(spadmin);
            itRole.addInheritance(itRolesOrga);
            // Build profile
            Profile profile = new Profile();
            profile.setApplication(openLDAP);
            ArrayList constraintsValue = new ArrayList();
            constraintsValue.add(dnValue);
            Filter constraintFilter = Filter.containsAll("memberOf", constraintsValue);
            profile.addConstraint(constraintFilter);
            // Add the profile (entitlement constraint) in the IT role
            itRole.add(profile);
            context.saveObject(itRole);
        }

        // Build Business Role
        Bundle businessRole = context.getObjectByName(Bundle.class, roleName);
        if (businessRole == null)
        {
            businessRole = new Bundle();
            businessRole.setName(roleName);
            businessRole.setDisplayName(roleName);
            businessRole.setType("business");
            businessRole.setOwner(spadmin);
            businessRole.addRequirement(itRole);
            businessRole.addInheritance(businessRolesOrga);
            context.saveObject(businessRole);
        }
    }

    context.commitTransaction();
    ]]></Source>
    </Rule>

</sailpoint>
